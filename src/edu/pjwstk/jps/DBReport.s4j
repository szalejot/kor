package edu.pjwstk.jps;

import pl.wcislo.sbql4j.java.model.runtime.Struct;
import edu.pjwstk.jps.DBConnector;
import edu.pjwstk.jps.model.*;

import java.util.*;
import java.text.SimpleDateFormat;

import com.db4o.*;

/**
 * Lista raportów:
 * 
 *  1. Oddziały firmy, w których żaden pracownik nie ma szkolenia x.
 *  2. Liczba wypożyczonych samochodów w oddziałach w danym dniu miesiąca.
 *  3. Utylizacja samochodów w danym oddziale dla miesiąca x. (ile % miesiąca były używane)
 *  4. Oddziały firmy których dyrektor pracuje dłużej niż x lat.
 *  5. Średnia długość stażu pracownika z rozbiciem na oddziały.
 *  6. Liczba pracowników w poszczególnych oddziałach firmy. 
 *  7. Wylistuj pracowników którzy nie mieli awansu od x lat.
 *  8. Lista pracowników na stanowiskach zarządczych
 *  9. Średnia liczba szkoleń na pracownika w poszczególnych oddziałach firmy.
 * 10. Lista samochodów starszych niż x lat w poszczególnych oddziałach firmy.
 * 11. Lista oddziałów w których pracują kobiety młodsze niż x lat i ich liczba.
 * 12. Liczba szkoleń na pracownika oddziału w danym roku.
 * 13. Liczba przeprowadzonych szkoleń w roku względem produktu.
 * 14. Liczba przeprowadzonych szkoleń w roku względem szkolenia.
 * 15. Liczba przeprowadzonych szkoleń w roku względem TrainingCompany.
 * 16. Średni wiek pracownika na podanym stanowisku wg oddziału.
 * 17. Historia użytkowania samochodu przez pracownika x.
 * 18. Historia uczęszczanych kursów przez pracownika x.
 * 19. Historia użytkowania samochodu x.
 * 20. Lista użytkowników samochodu x na miesiąc y.
 * 21. Lista zaplanowanych wypozyczen samochodów Company x na miesiąc y.
 * 22. Lista zaplanowanych kursów w oddziale x na rok y z rozbiciem na pracowników.
 * 23. Liczba wypożyczeń samochodów w roku x ze względu na markę.
 * 24. Lista firm przeprowadzających szkolenia z danego produktu.
 * 25. Średnia liczba wypożyczeń na pracownika w miesiącu x względem Company.
 * 26. Średnia liczba szkoleń na pracownika w roku x z rozbiciem na Company i płeć pracownika.
 * 
 * @author Michal
 *
 */
public class DBReport {

    public DBConnector dbconn;
    
    /**
     * @param args
     */
    public static void main(String[] args) {
       DBReport dbReport = new DBReport();
       dbReport.init();
       GUIQueries queries = new GUIQueries();
       queries.init();
       ObjectContainer db = dbReport.dbconn.getConnection();
       Calendar cal = Calendar.getInstance();
       cal.set(2013, 10, 1);
//       Collection<Training> trainings = #{ db.( Training ) };
//       Collection<Company> res1 = dbReport.report1((Training)(trainings.toArray()[0]).getName());
//       System.out.println("Report 1 = " + res1);
//       Collection<Struct> res2 = dbReport.report2(cal.getTime());
//       System.out.println("Report 2 = " + res2);
//       Collection<Struct> res3 = dbReport.report3((Company)(queries.getCompanyClass("headquaters nr 0").toArray()[0]), 2013, 10);
//       System.out.println("Report 3 = " + res3);
//       Collection<Company> res4 = dbReport.report4(10);
//       System.out.println("Report 4 = " + res4);
//       Collection<Struct> res5 = dbReport.report5();
//       System.out.println("Report 5 = " + res5);
//       Collection<Struct> res6 = dbReport.report6();
//       System.out.println("Report 6 = " + res6);
//       Collection<Labor> res7 = dbReport.report7(10);
//       System.out.println("Report 7 = " + res7);
//       Collection<Labor> res8 = dbReport.report8();
//       System.out.println("Report 8 = " + res8);
//       Collection<Struct> res9 = dbReport.report9();
//       System.out.println("Report 9 = " + res9);
//       Collection<Struct> res10 = dbReport.report10(10);
//       System.out.println("Report 10 = " + res10);
//       Collection<Struct> res11 = dbReport.report11(25);
//       System.out.println("Report 11 = " + res11);
//       Collection<Struct> res12 = dbReport.report12((Company)(queries.getCompanyClass("headquaters nr 0").toArray()[0]), cal.getTime());
//       System.out.println("Report 12 = " + res12);
//       Collection<Struct> res13 = dbReport.report13(cal.getTime());
//       System.out.println("Report 13 = " + res13);
//       Collection<Struct> res14 = dbReport.report14(cal.getTime());
//       System.out.println("Report 14 = " + res14);
//       Collection<Struct> res15 = dbReport.report15(cal.getTime());
//       System.out.println("Report 15 = " + res15);
//       Collection<Struct> res16 = dbReport.report16("Manager");
//       System.out.println("Report 16 = " + res16);
//       Collection<RentCar> res17 = dbReport.report17(((Company)(queries.getCompanyClass("headquaters nr 0").toArray()[0])).getDirector());
//       System.out.println("Report 17 = " + res17);
//       Collection<TrainingAssignment> res18 = dbReport.report18(((Company)(queries.getCompanyClass("headquaters nr 0").toArray()[0])).getDirector());
//       System.out.println("Report 18 = " + res18);
//       Collection<RentCar> res19 = dbReport.report19(1);
//       System.out.println("Report 19 = " + res19);
//       Collection<Labor> res20 = dbReport.report20(1, cal.getTime());
//       System.out.println("Report 20 = " + res20);
//       Collection<RentCar> res21 = dbReport.report21("headquaters nr 0", cal.getTime());
//       System.out.println("Report 21 = " + res21);
//       Collection<Struct> res22 = dbReport.report22("headquaters nr 0", cal.getTime());
//       System.out.println("Report 22 = " + res22);
//       Collection<Struct> res23 = dbReport.report23(cal.getTime());
//       System.out.println("Report 23 = " + res23);
       Collection<TrainingCompany> res24 = dbReport.report24("Consulting");
       System.out.println("Report 24 = " + res24);
       dbReport.close();
    }
    
    public void init() {
        dbconn = new DBConnector();
        dbconn.initializeDB();
    }
    
    public void close() {
        dbconn.close();
    }
    
    /**
     * 1. Oddziały firmy, w których żaden pracownik nie ma szkolenia x. 
     */
    public Collection<Company> report1(String tName) {
        ObjectContainer db = dbconn.getConnection();
        Collection<Company> res = #{ db.( Company as c where not exists (TrainingAssignment where labor.worksAt == c and training.name == tName)) };
        return res;
    }
    
    /**
     * 2. Liczba wypożyczonych samochodów w oddziałach w danym dniu miesiąca. 
     */
    public Collection<Struct> report2(Date paramDate) {
        ObjectContainer db = dbconn.getConnection();
        Calendar paramCal = Calendar.getInstance();
        paramCal.setTime(paramDate);
        int year = paramCal.get(Calendar.YEAR);
        int month = paramCal.get(Calendar.MONTH);
        int day = paramCal.get(Calendar.DAY_OF_MONTH);
        Calendar begin = Calendar.getInstance();
        Calendar end = Calendar.getInstance();
        begin.set(year, month, day, 0, 0);
        end.set(year, month, day, 23, 59);
        Date beginDate = new Date(begin.getTimeInMillis());
        Date endDate = new Date(end.getTimeInMillis());
        Collection<Struct> res = #{ db.( (Company as comp).(comp.name, ((Car where owner == comp) as c).(count(RentCar where car == c and date.time > beginDate.time and date.time < endDate.time))) ) };
        return res;
    }
    
    /**
     * 3. Utylizacja samochodów w danym oddziale dla miesiąca x. (ile % miesiąca były używane) 
     */
    public Collection<Struct> report3(String companyName, Date paramDate) {
        ObjectContainer db = dbconn.getConnection();
        Calendar paramCal = Calendar.getInstance();
        paramCal.setTime(paramDate);
        int year = paramCal.get(Calendar.YEAR);
        int month = paramCal.get(Calendar.MONTH);
        Calendar begin = Calendar.getInstance();
        Calendar end = Calendar.getInstance();
        begin.set(year, month, 1, 0, 0);
        float daysInMonth = begin.getActualMaximum(Calendar.DAY_OF_MONTH);
        end.set(year, month, (int)daysInMonth, 23, 59);
        Date beginDate = new Date(begin.getTimeInMillis());
        Date endDate = new Date(end.getTimeInMillis());
        Collection<Struct> res = #{ db.( ((Car where owner.name == companyName) as c).(c, count(RentCar where car == c and date.time > beginDate.time and date.time < endDate.time )*100/daysInMonth) ) };
        return res;
    }
    
    /**
     * 4. Oddziały firmy których dyrektor pracuje dłużej niż x lat. 
     */
    public Collection<Company> report4(int lenghtInYears) {
        ObjectContainer db = dbconn.getConnection();
        long milisInDay = 24l * 3600l * 1000l;
        Date today = new Date();
        Date date = new Date(today.getTime() - milisInDay * 356 * lenghtInYears);
        Collection<Company> res = #{ db.( Company where director.workSince.time < date.time ) };
        return res;
    }
    
    /**
     * 5. Średnia długość stażu pracownika z rozbiciem na oddziały. 
     */
    public Collection<Struct> report5() {
        ObjectContainer db = dbconn.getConnection();
        long milisInYear = 365l * 24l * 3600l * 1000l;
        Date today = new Date();
        Collection<Struct> res = #{ db.( (Company as c).(c.name, avg( (Labor where worksAt == c).((today.time - workSince.time)/milisInYear))  )) };
        return res;
    }
    
    /**
     * 6. Liczba pracowników w poszczególnych oddziałach firmy. 
     */
    public Collection<Struct> report6() {
        ObjectContainer db = dbconn.getConnection();
        Collection<Struct> res = #{ db.( (Company as c).(c.name, count(Labor where worksAt == c)) ) };
        return res;
    }
    
    /**
     * 7. Wylistuj pracowników którzy nie mieli awansu od x lat. 
     */
    public Collection<Labor> report7(int lenghtInYears) {
        ObjectContainer db = dbconn.getConnection();
        long milisInDay = 24l * 3600l * 1000l;
        Date today = new Date();
        Date date = new Date(today.getTime() - milisInDay * 356 * lenghtInYears);
        Collection<Labor> res = #{ db.( Labor where hasTitleSince.time < date.time ) };
        return res;
    }
    
    /**
     * 8. Lista pracowników na stanowiskach zarządczych. 
     */
    public Collection<Labor> report8() {
        ObjectContainer db = dbconn.getConnection();
        Collection<Labor> res = #{ db.( (Labor as l) where l.worksAt.director == l ) };
        return res;
    }
    
    /**
     * 9. Średnia liczba szkoleń na pracownika w poszczególnych oddziałach firmy. 
     */
    public Collection<Struct> report9() {
        ObjectContainer db = dbconn.getConnection();
        Collection<Struct> res = #{ db.( (Company as c).(c.name, avg( ((Labor as l) where l.worksAt == c).(count(TrainingAssignment where labor == l))) ) ) };
        return res;
    }
    
    /**
     * 10. Lista samochodów starszych niż x lat w poszczególnych oddziałach firmy 
     */
    public Collection<Struct> report10(int lenghtInYears) {
        ObjectContainer db = dbconn.getConnection();
        long milisInDay = 24l * 3600l * 1000l;
        Date today = new Date();
        Date date = new Date(today.getTime() - milisInDay * 356 * lenghtInYears);
        Collection<Struct> res = #{ db.( (Company as com).(com, (Car as c) where (c.owner == com and c.prodDate.time < date.time)) ) };
        return res;
    }
    
    /**
     * 11. Lista oddziałów w których pracują kobiety młodsze niż x lat i ich liczba. 
     */
    public Collection<Struct> report11(int age) {
        ObjectContainer db = dbconn.getConnection();
        long milisInYear = 365l * 24l * 3600l * 1000l;
        Date today = new Date();
        Collection<Struct> res = #{ db.( (Company as c where exists (Labor where worksAt == c and sex == 'M' and today.time - birthDate.time < milisInYear*age)).(c, count(Labor where worksAt == c and sex == 'M' and today.time - birthDate.time < milisInYear*age) ) ) };
        return res;
    }
    
    /**
     * 12. Liczba szkoleń na pracownika oddziału w danym roku. 
     */
    public Collection<Struct> report12(String companyName, Date paramDate) {
        ObjectContainer db = dbconn.getConnection();
        Calendar paramCal = Calendar.getInstance();
        paramCal.setTime(paramDate);
        int year = paramCal.get(Calendar.YEAR);
        Calendar begin = Calendar.getInstance();
        Calendar end = Calendar.getInstance();
        begin.set(year, 1, 1, 0, 0);
        end.set(year, 12, 31, 23, 59);
        Date beginDate = new Date(begin.getTimeInMillis());
        Date endDate = new Date(end.getTimeInMillis());
        Collection<Struct> res = #{ db.( ((Labor where worksAt.name == companyName) as l).(l, count(TrainingAssignment where labor == l and startDate.time > beginDate.time and startDate.time < endDate.time)) ) };
        return res;
    }
    
    /**
     * 13. Liczba przeprowadzonych szkoleń w roku względem produktu. 
     */
    public Collection<Struct> report13(Date paramDate) {
        ObjectContainer db = dbconn.getConnection();
        Calendar paramCal = Calendar.getInstance();
        paramCal.setTime(paramDate);
        int year = paramCal.get(Calendar.YEAR);
        Calendar begin = Calendar.getInstance();
        Calendar end = Calendar.getInstance();
        begin.set(year, 1, 1, 0, 0);
        end.set(year, 12, 31, 23, 59);
        Date beginDate = new Date(begin.getTimeInMillis());
        Date endDate = new Date(end.getTimeInMillis());
        Collection<Struct> res = #{ db.( (TrainingProduct as tp).(tp, count(TrainingAssignment where training.trainingProduct == tp and startDate.time > beginDate.time and startDate.time < endDate.time)) ) };
        return res;
    }
    
    /**
     * 14. Liczba przeprowadzonych szkoleń w roku względem szkolenia. 
     */
    public Collection<Struct> report14(Date paramDate) {
        ObjectContainer db = dbconn.getConnection();
        Calendar paramCal = Calendar.getInstance();
        paramCal.setTime(paramDate);
        int year = paramCal.get(Calendar.YEAR);
        Calendar begin = Calendar.getInstance();
        Calendar end = Calendar.getInstance();
        begin.set(year, 1, 1, 0, 0);
        end.set(year, 12, 31, 23, 59);
        Date beginDate = new Date(begin.getTimeInMillis());
        Date endDate = new Date(end.getTimeInMillis());
        Collection<Struct> res = #{ db.( (Training as t).(t, count(TrainingAssignment where training == t and startDate.time > beginDate.time and startDate.time < endDate.time)) ) };
        return res;
    }
    
    /**
     * 15. Liczba przeprowadzonych szkoleń w roku względem TrainingCompany. 
     */
    public Collection<Struct> report15(Date paramDate) {
        ObjectContainer db = dbconn.getConnection();
        Calendar paramCal = Calendar.getInstance();
        paramCal.setTime(paramDate);
        int year = paramCal.get(Calendar.YEAR);
        Calendar begin = Calendar.getInstance();
        Calendar end = Calendar.getInstance();
        begin.set(year, 1, 1, 0, 0);
        end.set(year, 12, 31, 23, 59);
        Date beginDate = new Date(begin.getTimeInMillis());
        Date endDate = new Date(end.getTimeInMillis());
        Collection<Struct> res = #{ db.( (TrainingCompany as tc).(tc, count(TrainingAssignment where training.trainingCompany == tc and startDate.time > beginDate.time and startDate.time < endDate.time)) ) };
        return res;
    }
    
    /**
     * 16. Średni wiek pracownika na podanym stanowisku wg oddziału. 
     */
    public Collection<Struct> report16(String titleName) {
        ObjectContainer db = dbconn.getConnection();
        long milisInYear = 365l * 24l * 3600l * 1000l;
        Date today = new Date();
        Collection<Struct> res = #{ db.( (Company as c).(c.name, avg( (Labor where worksAt == c and title.name == titleName).((today.time - birthDate.time)/milisInYear))  )) };
        return res;
    }
    
    /**
     * 17. Historia użytkowania samochodu przez pracownika x. 
     */
    public Collection<RentCar> report17(Labor ll) {
        ObjectContainer db = dbconn.getConnection();
        Collection<RentCar> res = #{ db.( RentCar where labor == ll ) };
        return res;
    }
    
    /**
     * 18. Historia uczęszczanych kursów przez pracownika x. 
     */
    public Collection<TrainingAssignment> report18(Labor ll) {
        ObjectContainer db = dbconn.getConnection();
        Collection<TrainingAssignment> res = #{ db.( TrainingAssignment where labor == ll ) };
        return res;
    }
    
    /**
     * 19. Historia użytkowania samochodu x. 
     */
    public Collection<RentCar> report19(int carNr) {
        ObjectContainer db = dbconn.getConnection();
        Collection<RentCar> res = #{ db.( RentCar where car.nr == carNr ) };
        return res;
    }
    
    /**
     * 20. Lista użytkowników samochodu x na miesiąc y. 
     */
    public Collection<Labor> report20(String carNr, Date paramDate) {
        ObjectContainer db = dbconn.getConnection();
        Calendar paramCal = Calendar.getInstance();
        paramCal.setTime(paramDate);
        int year = paramCal.get(Calendar.YEAR);
        int month = paramCal.get(Calendar.MONTH);
        Calendar begin = Calendar.getInstance();
        Calendar end = Calendar.getInstance();
        begin.set(year, month, 1, 0, 0);
        end.set(year, month, 31, 23, 59);
        Date beginDate = new Date(begin.getTimeInMillis());
        Date endDate = new Date(end.getTimeInMillis());
        int carNrInt = Integer.parseInt(carNr);
        Collection<Labor> res = #{ db.( (RentCar where car.nr == carNrInt and date > beginDate and date.time < endDate.time).labor ) };
        return res;
    }
    
    /**
     * 21. Lista zaplanowanych wypozyczen samochodów Company x na miesiąc y.
     */
    public Collection<RentCar> report21(String companyName, Date paramDate) {
        ObjectContainer db = dbconn.getConnection();
        Calendar paramCal = Calendar.getInstance();
        paramCal.setTime(paramDate);
        int year = paramCal.get(Calendar.YEAR);
        int month = paramCal.get(Calendar.MONTH);
        Calendar begin = Calendar.getInstance();
        Calendar end = Calendar.getInstance();
        begin.set(year, month, 1, 0, 0);
        end.set(year, month, 31, 23, 59);
        Date beginDate = new Date(begin.getTimeInMillis());
        Date endDate = new Date(end.getTimeInMillis());
        Collection<RentCar> res = #{ db.( RentCar where labor.worksAt.name == companyName and date.time > beginDate.time and date.time < endDate.time ) };
        return res;
    }
    
    /**
     * 22. Lista zaplanowanych kursów w oddziale x na rok y z rozbiciem na pracowników.
     */
    public Collection<Struct> report22(String companyName, Date paramDate) {
        ObjectContainer db = dbconn.getConnection();
        Calendar paramCal = Calendar.getInstance();
        paramCal.setTime(paramDate);
        int year = paramCal.get(Calendar.YEAR);
        Calendar begin = Calendar.getInstance();
        Calendar end = Calendar.getInstance();
        begin.set(year, 1, 1, 0, 0);
        end.set(year, 12, 31, 23, 59);
        Date beginDate = new Date(begin.getTimeInMillis());
        Date endDate = new Date(end.getTimeInMillis());
        Collection<Struct> res = #{ db.( ((Labor where worksAt.name == companyName) as l).(l, (TrainingAssignment where labor == l and startDate.time > beginDate.time and startDate.time < endDate.time)) ) };
        return res;
    }
    
    /**
     * 23. Liczba wypożyczeń samochodów w roku x ze względu na markę.
     */
    public Collection<Struct> report23(Date paramDate) {
        ObjectContainer db = dbconn.getConnection();
        Calendar paramCal = Calendar.getInstance();
        paramCal.setTime(paramDate);
        int year = paramCal.get(Calendar.YEAR);
        Calendar begin = Calendar.getInstance();
        Calendar end = Calendar.getInstance();
        begin.set(year, 1, 1, 0, 0);
        end.set(year, 12, 31, 23, 59);
        Date beginDate = new Date(begin.getTimeInMillis());
        Date endDate = new Date(end.getTimeInMillis());
        //TODO
        Collection<Struct> res = #{ db.( (Car.manufacturer as m).(m, count(RentCar where car.manufacturer == m and date.time > beginDate.time and date.time < endDate.time)) ) };
        return res;
    }
    
    /**
     * 24. Lista firm przeprowadzających szkolenia z danego produktu. 
     */
    public Collection<TrainingCompany> report24(String productName) {
        ObjectContainer db = dbconn.getConnection();
        Collection<TrainingCompany> res = #{ db.( TrainingCompany as tc where exists (Training where trainingProduct.fullName == productName and trainingCompany == tc) ) };
        return res;
    }

}
